import React, { useState } from "react";
import { Form, Input, Button, Row, Col } from 'antd';
import { useDispatch } from "react-redux";
import { useTypedSelector } from '../../../redux/hooks/useTypedSelector';
import { orderAC } from "../../../redux/actionCreators/orderAC/orderAC";
import { stepsAC } from "../../../redux/actionCreators/stepsAC/stepsAC";
import { userFirstNameAC, userSecondNameAC, userPhoneAC, userCountryAC,
    userCityAC, userAreaAC, userEmailAC, userSomeInfoAC } from "../../../redux/actionCreators/userInfoAC/userInfoAC";

export const OrderLeft = () => {
    const [buttonText, setButtonText] = useState("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
    const dispatch = useDispatch()
    const [form] = Form.useForm();
    const { isLoading } = useTypedSelector(state => state.orderReducer)
    const { firstName, secondName, phone, country, city,
        area, email, someInfo } = useTypedSelector(state => state.userInfoReducer)

    const buttonHandler = () => {
        setButtonText("–û—Ç–ø—Ä–∞–≤–∫–∞...")
        dispatch(orderAC(true)) //–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ isLoading
        //–ø–æ—Ç–æ–º –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –¥–∏—Å–ø–∞—Ç—á–∏–º false –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        //—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç
        setTimeout(() => {
            dispatch(orderAC(false))
            dispatch(stepsAC([
                {status: "finish", color: "#1890ff"},
                {status: "process", color: "#06d44b"}
            ]))
            setButtonText("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!üöÄ")
        }, 3500)
    }

    const firstNameHandler = e => {
        dispatch(userFirstNameAC(e.target.value))
    }
    const secondNameHandler = e => {
        dispatch(userSecondNameAC(e.target.value))
    }
    const phoneHandler = e => {
        dispatch(userPhoneAC(e.target.value))
    }
    const countryHandler = e => {
        dispatch(userCountryAC(e.target.value))
    }
    const cityHandler = e => {
        dispatch(userCityAC(e.target.value))
    }
    const areaHandler = e => {
        dispatch(userAreaAC(e.target.value))
    }
    const emailHandler = e => {
        dispatch(userEmailAC(e.target.value))
    }
    const someInfoHandler = e => {
        dispatch(userSomeInfoAC(e.target.value))
    }

    const formItemLayout = {
        labelCol: {
            span: 12,
        },
        wrapperCol: {
            span: 10,
        },
    };
    const buttonItemLayout = {
        wrapperCol: {
            span: 14,
            offset: 12,
        },
    };
    return (
        <>
            <Row>
                <Col span={6}></Col>
                <Col span={6}></Col>
                <Col span={12}>
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
                </Col>
            </Row>
            <Form
                {...formItemLayout}
                layout={'horizontal'}
                form={form}
                initialValues={{
                    layout: "horizontal",
                }}

            >
                <Form.Item label="–ò–º—è" >
                    <Input value={firstName} onChange={firstNameHandler} placeholder="–ë–æ–≥–¥–∞–Ω" />
                </Form.Item>

                <Form.Item label="–§–∞–º–∏–ª–∏—è">
                    <Input value={secondName} onChange={secondNameHandler} placeholder="–ó–∞–≥–ª–æ—Ç–Ω—é–∫" />
                </Form.Item>

                <Form.Item label="–¢–µ–ª–µ—Ñ–æ–Ω">
                    <Input value={phone} onChange={phoneHandler} placeholder="+7(900)-555-22-22" />
                </Form.Item>

                <Form.Item label="–°—Ç—Ä–∞–Ω–∞">
                    <Input value={country} onChange={countryHandler} placeholder="–ù–∏–≥–µ—Ä–∏—è" />
                </Form.Item>

                <Form.Item label="–ì–æ—Ä–æ–¥ / –û–±–ª–∞—Å—Ç—å">
                    <Input value={city} onChange={cityHandler} placeholder="–ê–±–∞–¥–∂–∏" />
                </Form.Item>

                <Form.Item label="–†–∞–π–æ–Ω">
                    <Input value={area} onChange={areaHandler} placeholder="–ì–µ—Ç—Ç–æ" />
                </Form.Item>

                <Form.Item label="E-mail">
                    <Input value={email} onChange={emailHandler} placeholder="example@gmail.com" />
                </Form.Item>

                <Form.Item label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è">
                    <Input value={someInfo} onChange={someInfoHandler} placeholder="–ß–µ–º –±—ã—Å—Ç—Ä–µ–µ, —Ç–µ–º –ª—É—á—à–µ" />
                </Form.Item>

                <Form.Item {...buttonItemLayout}>
                    <Button type="primary" loading={isLoading} onClick={() => buttonHandler()}>
                        {buttonText}
                    </Button>
                </Form.Item>

            </Form>
        </>
    )
}