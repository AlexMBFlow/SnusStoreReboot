import React from "react";
import { Form, Input, Button, Row, Col, message, notification } from 'antd';
import { useTypedSelector } from '../../redux/hooks/useTypedSelector';
import { sendOrder } from "../../api/sendOrder";
import { useActions } from '../../redux/hooks/useActions';
import "./Order.css";

export const Order = () => {
    const {isLoadingAC, setButtonTextAC,
        isDisabledAC, userEmailAC, userFirstNameAC, userSecondNameAC,
        userPhoneAC, userCountryAC, userCityAC, userAreaAC, userSomeInfoAC} = useActions()
    //const dispatch = useDispatch<AppDispatch>()
    const [form] = Form.useForm()
    const { snusBasket } = useTypedSelector(state => state.basketReducer)
    const { isLoading, buttonText, isDisabled } = useTypedSelector(state => state.orderReducer)
    const { firstName, secondName, phone, country, city,
        area, email, someInfo } = useTypedSelector(state => state.userInfoReducer)

    //–í–∞–ª–∏–¥–∞—Ü–∏—è –µ–º–µ–π–ª–∞
    let emailRegex = new RegExp('[a-z0-9]+@[a-z]+\.[a-z]{2,3}');


    const submitHandler: Function = () => {
        //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã 1 —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        if (snusBasket.length === 0) {
            notification.info({
                message: "–í–Ω–∏–º–∞–Ω–∏–µ!",
                description: "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë",
                placement: "bottomRight"
            })
            return
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!firstName || !secondName || !phone || !country || !city || !area || !email) {
            console.log(firstName)
            notification.info({
                message: "–í–Ω–∏–º–∞–Ω–∏–µ!",
                description: "–ù–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                placement: "bottomRight"
            })
            return
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è e-mail
        if (!emailRegex.test(email)) {
            notification.info({
                message: "–í–Ω–∏–º–∞–Ω–∏–µ!",
                description: "–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω E-mail",
                placement: "bottomRight"
            })
            return
        }
        if (isNaN(+phone)) {
            notification.info({
                message: "–í–Ω–∏–º–∞–Ω–∏–µ!",
                description: "–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                placement: "bottomRight"
            })
            return
        }

        setButtonTextAC("–û—Ç–ø—Ä–∞–≤–∫–∞...")
        isLoadingAC(true) //–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ isLoading —Ç.–µ. true
        sendOrder({
            basket: snusBasket,
            info: {
                firstName: firstName,
                secondName: secondName,
                phone: phone,
                country: country,
                city: city,
                area: area,
                email: email,
                someInfo: someInfo
            }
        }).then(res => {
            //–ø–æ—Ç–æ–º –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –¥–∏—Å–ø–∞—Ç—á–∏–º false –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            //—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç
            isLoadingAC(false)
            setButtonTextAC("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!üöÄ")
            isDisabledAC(true)
            message.success('–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!');
        }).catch(err => {
            message.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑')
        })
    }

    const emailHandler = e => {
        userEmailAC(e.target.value)
    }

    const firstNameHandler = e => {
        userFirstNameAC(e.target.value)
    }

    const secondNameHandler = e => {
        userSecondNameAC(e.target.value)
    }

    const phoneHandler = e => {
        userPhoneAC(e.target.value)
    }

    const countryHandler = e => {
        userCountryAC(e.target.value)
    }

    const cityHandler = e => {
        userCityAC(e.target.value)
    }

    const areaHandler = e => {
        userAreaAC(e.target.value)
    }

    const someInfoHandler = e => {
        userSomeInfoAC(e.target.value)
    }

    const formItemLayout = {
        labelCol: {
            span: 7,
        },
        wrapperCol: {
            span: 14,
        },
    };
    const buttonItemLayout = {
        wrapperCol: {
            span: 6,
            offset: 7,
        },
    };

    return (
        <div className="order-form">
            <Row className="order-form-title">
                <Col span={24}>
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
                </Col>
            </Row>
            <Form
                {...formItemLayout}
                layout={'horizontal'}
                form={form}
                initialValues={{
                    layout: "horizontal",
                }}

            >
                <Form.Item label="–ò–º—è" >
                    <Input value={firstName} onChange={firstNameHandler} placeholder="–ë–æ–≥–¥–∞–Ω" />
                </Form.Item>

                <Form.Item label="–§–∞–º–∏–ª–∏—è">
                    <Input value={secondName} onChange={secondNameHandler} placeholder="–ó–∞–≥–ª–æ—Ç–Ω—é–∫" />
                </Form.Item>

                <Form.Item label="–¢–µ–ª–µ—Ñ–æ–Ω">
                    <Input value={phone} onChange={phoneHandler} placeholder="+7(900)-555-22-22" />
                </Form.Item>

                <Form.Item label="–°—Ç—Ä–∞–Ω–∞">
                    <Input value={country} onChange={countryHandler} placeholder="–ù–∏–≥–µ—Ä–∏—è" />
                </Form.Item>

                <Form.Item label="–ì–æ—Ä–æ–¥ / –û–±–ª–∞—Å—Ç—å">
                    <Input value={city} onChange={cityHandler} placeholder="–ê–±–∞–¥–∂–∏" />
                </Form.Item>

                <Form.Item label="–†–∞–π–æ–Ω">
                    <Input value={area} onChange={areaHandler} placeholder="–ì–µ—Ç—Ç–æ" />
                </Form.Item>

                <Form.Item label="E-mail" name="email" rules={
                    [
                        {
                            type: "email",
                            message: "E-mail –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ!"
                        },
                        {
                            required: true,
                            message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏–µ –≤–∞—à E-mail"
                        }
                    ]
                }>
                    <Input placeholder="example@gmail.com" value={email} onChange={emailHandler} />
                </Form.Item>

                <Form.Item label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è">
                    <Input value={someInfo} onChange={someInfoHandler} placeholder="–ß–µ–º –±—ã—Å—Ç—Ä–µ–µ, —Ç–µ–º –ª—É—á—à–µ" />
                </Form.Item>

                <Form.Item {...buttonItemLayout}>
                    <Button disabled={isDisabled} type="primary" loading={isLoading} onClick={() => submitHandler()}>
                        {buttonText}
                    </Button>
                </Form.Item>
            </Form>
        </div>
    )
}